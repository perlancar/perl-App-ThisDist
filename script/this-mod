#!perl

use 5.010001;
use strict;
use warnings;
use Log::ger::Screen;

use App::ThisDist 'this_mod';
use Cwd;
use Getopt::Long;

# AUTHORITY
# DATE
# DIST
# VERSION

my ($quiet, $namespace_prefix, $extract_version);
$namespace_prefix = $ENV{PERL_THIS_MOD_NAMESPACE_PREFIX};
Getopt::Long::Configure("bundling", "no_ignore_case");
GetOptions(
    "quiet|q" => \$quiet,
    "namespace-prefix|n=s" => \$namespace_prefix,
    "extract-version|V" => \$extract_version,
);

my $cwd = getcwd();
my $mod = this_mod($cwd, $extract_version);

if (defined $mod) {
    if (defined $namespace_prefix && length $namespace_prefix) {
        $namespace_prefix =~ s/::\z//;
        $mod =~ s/\A\Q$namespace_prefix\E(?:::|\z)//i;
    }
    print $mod, "\n";
} else {
    if ($quiet) {
    } else {
        warn "this-mod: No perl module name can be associated with current directory '$cwd'\n";
    }
    exit 1;
}


# ABSTRACT: Return name of Perl module associated with the current directory
# PODNAME:

=head1 SYNOPSIS

 % pwd
 /home/budi/perl-Foo-Bar

 % this-mod
 Foo::Bar

Some common usage:

 # read documentation about the current module
 % man `this-mod`

 # open documentation abut the current module on MetaCPAN (but see this-mod-on-metacpan script)
 % firefox metacpan.org/pod/`this-mod`

Some other examples:

 # (Re)install this module using L<cpanminus|App::cpanminus>:
 % cpanm -n --reinstall `this-mod`

 # remove namespace prefix
 % cd repos/perl-Acme-CPANModules-Symlink
 % cpanmodules ls-entries `this-mod -n Acme::CPANModules`


=head1 DESCRIPTION

This script tries these methods when guessing Perl module name associated with
current directory. First it tries to find the associated Perl distribution name:

=over

=item * Distribution metadata {MYMETA,META}.{json,yml}

=item * Makefile.PL, Makefile, Build.PL

=item * Name in F<dist.ini> (L<Dist::Zilla> configuration file), if the file is available

=back

After it gets the distribution (e.g. C<Foo-Bar>) it then converts it to module
name syntax (i.e. C<Foo::Bar>). If it cannot find an associated Perl
distribution name, it will print an error message to stderr (unless being told
to be quiet via C<--quiet>) and exit with non-zero status.


=head1 OPTIONS

=head2 --quiet, -q

=head2 --extract-version, -V

=head2 --namespace-prefix, -n

Remove the specified namespace prefix.


=head1 ENVIRONMENT

=head2 DEBUG

Bool. If set to true, will print debugging statement to stderr.

=head2 PERL_THIS_MOD_NAMESPACE_PREFIX

String. Set default for C<--namespace-prefix> option.


=head1 SEE ALSO

L<this-dist>

L<this-mod-on-metacpan>

Some scripts like L<pmman> and L<pmpath> (from L<App::PMUtils>) or
L<list-dist-contents> and L<dist-has-deb> (from L<App::DistUtils>) already
default to "current module" or "current distribution" so instead of saying:

 % pmman `this-mod`

you can just say:

 % pmman
